#' @title Log Loss
#' @description This function gives a \code{numeric} representing the loss given
#' a \code{vector} of observations and a \code{matrix} of coefficients
#' @param Obs A \code{matrix} containing observations we want to
#' create a logistic model for.
#' @param Resp An \code{integer} that tells which column of the observation matrix you
#' want to be the response variable.
#' @param Preds A \code{vector} of integers corresponding to the columns for the desired predictor variables
#' @return A \code{numeric} giving value of loss at \code{beta}
#' @author Charles Benfer
#' @importFrom stats
#' @export
log_loss <- function(Beta, Obs, Resp, Preds){
Obs <- cbind(as.matrix(Obs[,Resp]),rep(1, nrow(Obs)), as.matrix(Obs[,Preds]))
p <- rep(NA, nrow(Obs))
for(i in 1:nrow(Obs)){
p[i] <- 1/(1+exp(-t(Obs[i,c(2,Preds)])%*%Beta))
}
(t(log(p))%*%(-Obs[,Resp]) - t(log(1-p))%*%(1-Obs[,Resp]))
}
#' @title Finding the Betas
#' @description This function will spit out the desired \code{beta} values for the
#' log loss function
#' @param Data A \code{matrix} containing the data we want to find the optimal coefficem
#' @param f A \code{function} that we are optimizing. Default is \code{log_loss} from the same package
#' @param
#' @return A \code{vector} giving the optimized beta values
#' @author Charles Benfer
#' @import stats
#' @import MASS
#' @export
#' @examples
#'   #data obtained from https://stats.oarc.ucla.edu/r/dae/logit-regression/
#'   test_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
#'   test_resp <- 1
#'   test_pred <- 2:4
#'   log_betas(Data = test_data, Y = test_resp, X = test_pred)
log_betas <- function(Data, Y, X){
Data <- cbind(as.matrix(Data[,Y]),rep(1, nrow(Data)), as.matrix(Data[,X]))
if(length(X)>1){
X <- X+1
}
else{X = 3}
start_betas <- ginv(t(as.matrix(Data[,c(2,X)]))%*%as.matrix(Data[,c(2,X)]))%*%t(as.matrix(Data[,c(2,X)]))%*%as.matrix(Data[,Y])
optim(start_betas, log_loss, Obs = Data, Resp=Y, Preds=X)
}
#' @title Bootstrap Logistic Regression Confidence Intervals
#' @description Computes bootstrap confidence intervals for coefficients estimated by the logistic regression model.
#' @param obs A \code{matrix} containing the full data set with predictors and response.
#' @param resp A \code{integer} representing the response variable column.
#' @param pred A \code{vector} representing the predictor variables.
#' @param alpha A \code{numeric} representing the significance level for the confidence intervals (default is 0.05).
#' @param B A \code{integer} representing the number of bootstrap samples to generate (default is 20).
#' @return A \code{matrix} with coefficients and their corresponding lower and upper confidence intervals
#' @author Ernest Asante
#' @import stats
#' @export
#' @examples
#'   #data obtained from https://stats.oarc.ucla.edu/r/dae/logit-regression/
#'   test_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
#'   test_resp <- 1
#'   test_pred <- 2:4
#'   results <- suppressWarnings(bootstrap_logistic_confidence(test_data, test_resp, test_pred))
#'   print(results)
bootstrap_logistic_confidence <- function(obs, resp, pred, alpha = 0.05, B = 20) {
original_fit <- log_betas(Data = obs, Y = resp, X = pred)
coeffs <- original_fit$par
boot_coefs <- matrix(NA, nrow = B, ncol = length(coeffs))
for (i in 1:B) {
sampled_data <- obs[sample(nrow(obs), replace = TRUE), ]
boot_coefs[i, ] <- log_betas(Data = sampled_data, Y = resp, X = pred)$par
}
ci_matrix <- matrix(NA, nrow = length(coeffs), ncol = 3)
colnames(ci_matrix) <- c("Actual", "Lower", "Upper")
for (j in 1:length(coeffs)) {
se <- sd(boot_coefs[, j])
z_value <- qnorm(1 - alpha / 2)
ci_matrix[j, ] <- c(coeffs[j], coeffs[j] - z_value * se, coeffs[j] + z_value * se)
}
return(ci_matrix)
}
#' @title Bootstrap Logistic Regression Confidence Intervals
#' @description Computes bootstrap confidence intervals for coefficients estimated by the logistic regression model.
#' @param Beta A \code{vector} of beta values for the logistic regression (can be obtained from the \code{log_betas} function.)
#' @param Data A \code{matrix} containing the data we want to plot
#' @param Resp A \code{integer} representing the response variable column.
#' @param pred A \code{integer} representing the predictor variable column.
#' @return A plot showing the logistic regression line.
#' @author Ernest Asante
#' @import stats
#' @export
#' @examples
#'   test_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
#'   logistic_plot(test_data, Resp = 1, Pred= 3)
logistic_plot <- function(Data, Pred, Resp){
coeffs <- log_betas(Data = Data, Y = Resp, X = Pred)$par
curve <- function(x){(exp(coeffs[1] + coeffs[2]*x))/(1 + exp(coeffs[1] + coeffs[2]*x))}
plot(Data[,Resp]~Data[,Pred], ylab = 'Response', xlab = colnames(Data)[Pred])
plot(curve, add = T)
}
coeffs[1]
#' @param Data A \code{matrix} containing the data we want to plot
#' @param Resp A \code{integer} representing the response variable column.
#' @param pred A \code{integer} representing the predictor variable column.
#' @return A plot showing the logistic regression line.
#' @author Ernest Asante
#' @import stats
#' @export
#' @examples
#'   test_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
#'   logistic_plot(test_data, Resp = 1, Pred= 3)
logistic_plot <- function(Data, Pred, Resp){
coeffs <- log_betas(Data = Data, Y = Resp, X = Pred)$par
curve <- function(x){(exp(coeffs[1] + coeffs[2]*x))/(1 + exp(coeffs[1] + coeffs[2]*x))}
plot(Data[,Resp]~Data[,Pred], ylab = 'Response', xlab = colnames(Data)[Pred])
plot(curve, add = T)
}
test_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
coeffs[1]
#' @title Bootstrap Logistic Regression Confidence Intervals
#' @description Computes bootstrap confidence intervals for coefficients estimated by the logistic regression model.
#' @param Data A matrix containing the data we want to plot.
#' @param Resp An integer representing the response variable column.
#' @param Pred An integer representing the predictor variable column.
#' @return A plot showing the logistic regression line.
#' @author Ernest Asante
#' @import stats
#' @export
#' @examples
#'   test_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
#'   logistic_plot(test_data, Resp = 1, Pred = 3)
logistic_plot <- function(Data, Pred, Resp){
# Assuming log_betas returns a list with 'par' containing the coefficients
fit <- log_betas(Data = Data, Y = Resp, X = Pred)
coeffs <- fit$par
# Define the curve function
logistic_curve <- function(x) (exp(coeffs[1] + coeffs[2] * x)) / (1 + exp(coeffs[1] + coeffs[2] * x))
# Create a scatter plot of the observed data
plot(Data[, Pred], Data[, Resp], ylab = 'Response', xlab = colnames(Data)[Pred], main = "Logistic Regression Curve")
# Create a sequence of predictor values for plotting the curve
pred_seq <- seq(min(Data[, Pred]), max(Data[, Pred]), length.out = 100)
# Add the logistic curve to the plot
lines(pred_seq, logistic_curve(pred_seq), col = "red")
}
# You should call this function with the correct column indices for Resp and Pred
#' @title “Confusion Matrix”  (using a cut-off value for prediction at 0.5)
#' @description based on this cut-off value, create the confusion matrix and also output the following metrics: prevalence, accuracy, sensitivity, specificity, false discovery rate, and diagnostic odds ratio
#' @param  beta: A  \code{matrix} to denote the coefficient vector.
#' @param X:  A  \code{coloumn vector} containing the predictor.
#' @param y : A  \code{coloumn vector} containing the responses.
#' @param cut_off : A number of the value for prediction, default is 0.5. (i.e. assign value 1 for predictions above 0.5 and value 0 for prediction below or equal to 0.5)
#' @return A list of the following attributes: `confusion_matrix`, `prevalence`, `accuracy`, `sensitivity`, `specificity`, `false_discovery_rate`, `diagnostic_odds_ratio`
#' @author Group 11
#' @importFrom stats runif
#' @export
#' @examples
#' # Generate synthetic data
#' set.seed(123)
#' n <- 100
#' X <- cbind(1, rnorm(n))  # Assuming X includes a column of 1's for the intercept
#' beta <- c(-1, 2)         # Coefficients (intercept = -1, slope = 2)
#' y <- ifelse((1 / (1 + exp(-X %*% beta))) > 0.5, 1, 0)  # Generate binary labels
#' # Call your confusion_matrix function
#' result <- confusion_matrix(beta, X, y, cut_off = 0.5)
confusion_matrix <- function(beta, X, y, cut_off = 0.5) {
# first of all Calculate the predicted probabilities
predicted_probs <- (1 / (1 + exp(-X %*% beta)))
# Convert continuous probabilities to binary classification labels
predicted_labels <- ifelse(predicted_probs > cut_off, 1, 0)
# Compare our predictions and our responses y
TP <- sum(y == 1 & predicted_labels == 1)
FP <- sum(y == 0 & predicted_labels == 1)
FN <- sum(y == 1 & predicted_labels == 0)
TN <- sum(y == 0 & predicted_labels == 0)
total_positive <- TP + FN
total_negative <- FP + TN
# Create the list for result
confuse_matrix <- matrix(c(TN, FP, FN, TP), nrow = 2)
rownames(confuse_matrix) <-  c("Actual Positive", "Actual Negative")
colnames(confuse_matrix) <-  c("Predicted Positive", "Predicted Negative")
prevalence <- total_positive / (total_positive + total_negative)
accuracy <- (TP + TN) / (total_positive + total_negative)
sensitivity <- TP / (TP + FN)
specificity <- TN / (TN + FP)
false_discovery_rate <- FP / (FP + TP)
diagnostic_odds_ratio <- (TP * TN) / (FP * FN)
# Create the list and return it
final_confusion_matrix <- list(
confuse_matrix = confuse_matrix,
prevalence = prevalence,
accuracy = accuracy,
sensitivity = sensitivity,
specificity = specificity,
false_discovery_rate = false_discovery_rate,
diagnostic_odds_ratio = diagnostic_odds_ratio
)
return(final_confusion_matrix)
}
#refrence:
# https://chat.openai.com/share/d17d0b56-4d16-4200-8ab9-668d61c9ac1b
#' @title plot for “Confusion Matrix”
#' @description The possibility for the user to plot of any of the above metrics evaluated over a grid of cut-off values for prediction going from 0.1 to 0.9 with steps of 0.1.
#' @param  beta: A  \code{matrix} to denote the coefficient vector.
#' @param X:  A  \code{coloumn vector} containing the predictor.
#' @param y : A  \code{coloumn vector} containing the responses.
#' @param value_name : A character, representing the user's choice of which value in the matrix user wants to plot. It needs to be one of six `prevalence`, `accuracy`, `sensitivity`, `specificity`, `false_discovery_rate`, `diagnostic_odds_ratio` , the default is "prevalence"
#' @return A plot of the value choiced from user versus cut_off_value(from0.1 to 0.9 with step of 0.1)
#' @author Group 11
#' @importFrom stats runif
#' @export
#' @examples
#' # Generate synthetic data
#' set.seed(123)
#' n <- 100
#' X <- cbind(1, rnorm(n))  # Assuming X includes a column of 1's for the intercept
#' beta <- c(-1, 2)         # Coefficients (intercept = -1, slope = 2)
#' y <- ifelse((1 / (1 + exp(-X %*% beta))) > 0.5, 1, 0)  # Generate binary labels
#' # Call your confusion_matrix function
#' result <- confusion_matrix(beta, X, y, cut_off = 0.5)
#' plot_confusion_matrix(y,X,beta, value_name = "accuracy")
plot_confusion_matrix <- function(y, X, beta, value_name = "prevalence"){
cut_off_value <- seq(0.1,0.9, by = 0.1)
confusion_matrix_value <- matrix(NA, nrow = 6, ncol = 9)
rownames(confusion_matrix_value) <- c("prevalence","accuracy", "sensitivity", "specificity", "false_discovery_rate","diagnostic_odds_ratio")
colnames(confusion_matrix_value) <- seq(0.1, 0.9, by=0.1)
for(i in 1:9){
result <- confusion_matrix(beta, X, y, cut_off = cut_off_value[i])
confusion_matrix_value[1,i] <- result$prevalence
confusion_matrix_value[2,i] <- result$accuracy
confusion_matrix_value[3,i] <- result$sensitivity
confusion_matrix_value[4,i] <- result$specificity
confusion_matrix_value[5,i] <- result$false_discovery_rate
confusion_matrix_value[6,i] <- result$diagnostic_odds_ratio
}
if(value_name %in% rownames(confusion_matrix_value)){
selected_data <- confusion_matrix_value[value_name,]
main_title <- paste(value_name, "vs", "cut_off_value" )
plot(selected_data,cut_off_value, type = "p", col = "blue"
, xlab="cut-off value"
, ylab= value_name
, main = main_title)
grid()
} else {
cat(value_name, "do not exist.\n")
}
}
# Reference：https://chat.openai.com/share/d17d0b56-4d16-4200-8ab9-668d61c9ac1b
